// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id                              Int                         @unique                   @default(autoincrement())
  uuid                            String                      @id                       @default(uuid())
  verify_email                    Boolean                                               @default(false)
  profile                         String?
  shortbio                        String?
  account_type                    String
  name                            String
  phone                           String
  username                        String
  email                           String
  password                        String
  composition                     Compositions[]
  likes                           Likes[]
  comments                        Comments[]
  bookmarks                       Bookmarks[]
  followedBy                      Follows[]                                             @relation("follower")
  following                       Follows[]                                             @relation("following")
}

model Compositions {
  id                              Int                         @unique                   @default(autoincrement())
  uuid                            String                      @id                       @default(uuid())
  title                           String
  description                     String
  content                         String
  category                        String
  status                          String
  slug                            String
  datePublished                   String
  dateEdited                      String?
  likes                           Likes[]
  comments                        Comments[]
  bookmarks                       Bookmarks[]
  user                            Users                                                 @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  userId                          String
}

model Likes {
  id                              Int                         @unique                   @default(autoincrement())
  uuid                            String                      @id                       @default(uuid())
  user                            Users                                                 @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  userId                          String
  composition                     Compositions                                          @relation(fields: [compositionId], references: [uuid], onDelete: Cascade)
  compositionId                   String
}

model Comments {
  id                              Int                         @unique                   @default(autoincrement())
  uuid                            String                      @id                       @default(uuid())
  content                         String
  user                            Users                                                 @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  userId                          String
  composition                     Compositions                                          @relation(fields: [compositionId], references: [uuid], onDelete: Cascade)
  compositionId                   String
}

model Bookmarks {
  id                              Int                         @unique                   @default(autoincrement())
  uuid                            String                      @id                       @default(uuid())
  user                            Users                                                 @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  userId                          String
  composition                     Compositions                                          @relation(fields: [compositionId], references: [uuid], onDelete: Cascade)
  compositionId                   String
}

model Follows {
  id                              Int                         @unique                   @default(autoincrement())
  follower                        Users?                                                @relation("follower", fields: [followerId], references: [uuid], onDelete: Cascade)
  followerId                      String
  following                       Users?                                                @relation("following", fields: [followingId], references: [uuid], onDelete: Cascade)
  followingId                     String

  @@id([followerId, followingId])
}